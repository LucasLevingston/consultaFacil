// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")

  phone String?
  password String?
  image         String?
  isDone Boolean @default(false)
  role Role

  patientDetails PatientDetails?
  doctorDetails  DoctorDetails?

  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

enum Role {
  patient
  doctor
  admin
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model DoctorDetails {
   userId                    String  @id 
  specialty                 String?
  phone                     String? 
  name                     String?
  email                     String?
  licenseNumber             String?
  privacyConsent            Boolean?
  imageProfile String?
  cpf String?
  identificationDocumentId String?
  identificationDocumentType  String?
  identificationDocumentUrl String?
  birthDate DateTime?
  gender Gender?
  address                   String?



  user User @relation(fields: [userId], references: [id])

  appointments Appointment[]
}

model PatientDetails {
   userId                    String  @id 
  phone                     String? 
  name                     String?
  email                     String?
  gender                    Gender?
  birthDate                 DateTime?
  address                   String?
  occupation                String?
  emergencyContactName      String?
  emergencyContactNumber    String?
  allergies                 String?
  currentMedication         String?
  familyMedicalHistory      String?
  pastMedicalHistory        String?
  privacyConsent            Boolean?
  treatmentConsent Boolean?
  disclosureConsent Boolean?
  cpf String?
  imageProfile String?
  identificationDocumentId String?
  identificationDocumentType  String?
  identificationDocumentUrl String?


  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  appointments Appointment[]
}

model Appointment {
  id                 String   @id @default(uuid())
  schedule           DateTime
  reason             String?
  note               String?
  status             Status   @default(scheduled)
  patientId          String
  doctorId           String
  cancellationReason String?
  createdAt          DateTime @default(now())

  patient PatientDetails @relation(fields: [patientId], references: [userId])
  doctor  DoctorDetails  @relation(fields: [doctorId], references: [userId])
}

enum Status {
  scheduled
  pending
  canceled
  finalized
}

enum Gender {
  male
  female
  other
}